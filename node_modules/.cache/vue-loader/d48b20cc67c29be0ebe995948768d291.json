{"remainingRequest":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/src/views/Case1.vue?vue&type=style&index=0&id=78df48b7&scoped=true&lang=css&","dependencies":[{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/src/views/Case1.vue","mtime":1656928867070},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/css-loader/dist/cjs.js","mtime":1656928863565},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1656928866629},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/postcss-loader/src/index.js","mtime":1656928865501},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/cache-loader/dist/cjs.js","mtime":1656928862784},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/vue-loader/lib/index.js","mtime":1656928866628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRlbnQtdmlldyB7CiAgbWFyZ2luOiA1MHB4Owp9Cg=="},{"version":3,"sources":["Case1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA","file":"Case1.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <!-- 内容视图 -->\n  <div class=\"content-view\">\n    <!-- TablePlugin -->\n    <TablePlugin @scroll=\"scrollChange\">\n      <a-table\n        :columns=\"columns\"\n        :data-source=\"dataSource\"\n        :row-key=\"record => record.id\"\n        :pagination=\"pagination\"\n        :row-selection=\"{ selectedRowKeys: selectedRowKeys, onChange: onSelectChange }\"\n        :scroll=\"{ x: 1500 }\"\n        @change=\"onChange\"\n      ></a-table>\n    </TablePlugin>\n  </div>\n</template>\n\n<script>\n// 导入\nimport TablePlugin from '../components/TablePlugin'\n// 列数据\nconst columns = [\n  {\n    title: 'id',\n    dataIndex: 'id',\n    key: 'id',\n    fixed: 'left'\n  },\n  {\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name'\n  },\n  {\n    title: '年龄',\n    dataIndex: 'age',\n    key: 'age',\n    // 支持这种开启排序之后，外部公共进行修改数据源的方式，其实也就是排序走服务器最合适，或者本地手动排序一遍，调整数据源。\n    sorter: true\n    // 不支持这种内部的排序方式，因为无法使数据源发生变化，所有需要改变数据源的操作都需要公共处理，\n    // 这样数据源变化了，列表展示层才会刷新，否则生效的则会是悬浮的头部层，下面的列表会因为数据源没有变化而不刷新生效\n    // sorter: (a, b) => a.age > b.age\n  }\n]\n// 模拟数据\nconst dataSource = []\nfor (let index = 0; index < 100; index++) {\n  dataSource.push({ id: index, name: `User${index}`, age: index + 10 }) \n}\nexport default {\n  components: {\n    TablePlugin\n  },\n  data () {\n    return {\n      columns,\n      dataSource,\n      pagination: {\n        current: 1,\n        pageSize: 50,\n        total: dataSource.length\n      },\n      // 勾选框这种方式就是修改数据源，所以不需要做任何处理，排序操作跟这个原理一致\n      selectedRowKeys: []\n    }\n  },\n  methods: {\n    // Table回调\n    onChange (pagination, filters, sorter) {\n      // 简陋的本地排序处理\n      if (sorter.columnKey === 'age') {\n        if (sorter.order !== 'ascend') {\n          this.dataSource = this.dataSource.reverse()\n        }\n      }\n    },\n    // 勾选测试\n    onSelectChange (selectedRowKeys) {\n      this.selectedRowKeys = selectedRowKeys\n    },\n    // 触发了滚动\n    scrollChange (isVer) {\n      console.log(`正在 ${isVer ? '竖向' : '横向'} 滚动`)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.content-view {\n  margin: 50px;\n}\n</style>"]}]}