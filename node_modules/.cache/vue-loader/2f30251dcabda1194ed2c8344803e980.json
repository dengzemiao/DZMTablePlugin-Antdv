{"remainingRequest":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/src/components/TablePlugin.vue?vue&type=style&index=0&id=2c6bebbe&scoped=true&lang=css&","dependencies":[{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/src/components/TablePlugin.vue","mtime":1644822337845},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/css-loader/dist/cjs.js","mtime":1644558789261},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644558790081},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/postcss-loader/src/index.js","mtime":1644558789518},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/cache-loader/dist/cjs.js","mtime":1644558788599},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMTablePlugin-Antdv/node_modules/vue-loader/lib/index.js","mtime":1644558789767}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnBsdWdpbi12aWV3IHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLnByb2dyZXNzLXZpZXcgewogIGhlaWdodDogMTVweDsKfQoucHJvZ3Jlc3MtYmFyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBkaXNwbGF5OiBub25lOwogIHotaW5kZXg6IDEwMDsKICBsZWZ0OiAwOwogIHJpZ2h0OiAwOwogIGJvdHRvbTogMDsKfQo="},{"version":3,"sources":["TablePlugin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TablePlugin.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"plugin-view\" ref=\"plugin-view\">\n      <!-- 列表 -->\n      <slot></slot>\n      <!-- 头部浮动 -->\n      <slot></slot>\n      <!-- 进度条 -->\n      <div @scroll=\"scrollEvent\" class=\"progress-bar\" ref=\"progress-bar\">\n        <div class=\"progress-view\" ref=\"progress-view\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    bottomHeight: {\n      type: Number,\n      default: () => 64 // 如果是 ant 框架自带分页栏 高度应该是 64px\n    }\n  },\n  data () {\n    return {\n      // 监听器\n      erd: undefined,\n      // 是否滚动了头部悬浮\n      isSuspensionScroll: false,\n      // 是否进入了自定义滚动条\n      isPBScroll: false,\n      // 当前插件父视图\n      pluginView: undefined,\n      // 当前自定义进度条\n      progressBar: undefined,\n      progressView: undefined,\n      // 当前最外层滚动对象\n      scrollView: undefined,\n      // 当前展示的 table\n      tableWrapper: undefined,\n      // 当前展示的 table 的 tableBody\n      tableBody: undefined,\n      // 当前展示的 table 的 header\n      tableThead: undefined,\n      // 当前展示的 table 的 header 的高度\n      tableTheadHeight: 0,\n      // 头部悬浮的 table\n      tableWrapperSuspension: undefined,\n      // 头部悬浮部分\n      tableBodySuspension: undefined\n    }\n  },\n  // watch: {\n  //   // 监听列表高度变化，有变化就需要重新布置位置\n  //   'tableWrapper.clientHeight': {\n  //     handler (newHeight, oldHeight) {\n  //       console.log('tableWrapper.clientHeight', newHeight, oldHeight)\n  //       this.scrollChange()\n  //     }\n  //   },\n  //   // 监听列表头高度变化，有变化就需要重新布置位置\n  //   'tableThead.clientHeight': {\n  //     handler (newHeight, oldHeight) {\n  //       console.log('tableThead.clientHeight', newHeight, oldHeight)\n  //       this.tableTheadHeight = newHeight\n  //       this.tableWrapperSuspension.style.height = `${newHeight}px`\n  //       this.scrollChange()\n  //     }\n  //   }\n  // },\n  methods: {\n    // 内容宽度变化刷新修改进度条宽度\n    reloadUI () {\n      // 将进度条的宽度与 tableBody 保持一致\n      setTimeout(() => {\n        this.progressView.style.width = `${this.tableBody.scrollWidth}px`\n      }, 10)\n    },\n    // 自定义滚动条滚动中\n    scrollEvent (e) {\n      if (this.isPBScroll) {\n        this.tableBody.scrollLeft = e.target.scrollLeft\n        this.tableBodySuspension.scrollLeft = e.target.scrollLeft\n      }\n    },\n    // 滚动变化处理\n    scrollChange () {\n      // 获取元素的大小及其相对于视口的位置\n      const pluginViewRect = this.pluginView.getBoundingClientRect()\n      // 检查 tableBody 宽度是否还支持滚动\n      const isTableBodyScroll = this.tableBody.clientWidth < this.tableBody.scrollWidth\n      // 滚动控件进度条上面以滚动过的高度\n      const topY = this.scrollView.scrollTop\n      // 滚动控件进度条上面以滚动过的高度 + 滚动控件高度 = 当前滚动控件窗口的最底部Y值位置\n      const lastY = topY + this.scrollView.clientHeight\n      // 当前距离窗口顶部的高度 + 滚动控件进度条上面以滚动过的高度 = 当前控件距离顶部的滚动距离\n      const offsetTop = pluginViewRect.y + topY\n      // 最小Y值\n      const minY = offsetTop + this.progressView.clientHeight\n      // 最大Y值\n      const maxY = offsetTop + this.pluginView.clientHeight - this.bottomHeight\n      // 判断 lastY 是否在 最大最小Y值范围以内 && tableBody 的宽度是否还支持滚动\n      if (lastY > minY && lastY < maxY && isTableBodyScroll) {\n        this.progressBar.style.display = 'block'\n        this.progressBar.style.bottom = `${this.bottomHeight + (maxY - lastY)}px`\n        this.progressBar.scrollLeft = this.tableBody.scrollLeft\n      } else {\n        this.progressBar.style.display = 'none'\n      }\n      // 判断头部悬浮位置\n      this.tableWrapperSuspension.style.top = `${Math.max(Math.min(-pluginViewRect.y, (maxY - this.tableTheadHeight - offsetTop)), 0)}px`\n    }\n  },\n  mounted () {\n    // 当前封装组件\n    this.pluginView = this.$refs['plugin-view']\n    // 当前自定义进度条\n    this.progressBar = this.$refs['progress-bar']\n    this.progressView = this.$refs['progress-view']\n    // 当前滚动监听对象\n    const scrollListener = window\n    // 当前滚动对象\n    this.scrollView = document.documentElement\n    // 获得所有的 table\n    const tableWrappers = this.pluginView.getElementsByClassName('ant-table-wrapper')\n    // 当前展示的 table\n    this.tableWrapper = tableWrappers[0]\n    // 用于头部悬浮的 table\n    this.tableWrapperSuspension = tableWrappers[1]\n    // 获取头部高度用于悬浮\n    this.tableThead = this.tableWrapper.getElementsByClassName('ant-table-thead')[0]\n    this.tableTheadHeight = this.tableThead.clientHeight\n    // 获取用于展示数据的 tableBody\n    const tableScroll = this.tableWrapper.getElementsByClassName('ant-table-scroll')[0]\n    this.tableBody = tableScroll.getElementsByClassName('ant-table-body')[0]\n    // 将进度条的宽度与 tableBody 保持一致\n    this.progressView.style.width = `${this.tableBody.scrollWidth}px`\n    // 添加进入自定义进度条监听，以防重复设置滚动\n    this.progressBar.onmouseenter = () => {\n      this.isPBScroll = true\n      this.isSuspensionScroll = false\n    }\n    // 添加进 tableBody 监听，以防重复设置滚动\n    this.tableBody.onmouseenter = () => {\n      this.isPBScroll = false\n      this.isSuspensionScroll = false\n    }\n    // 添加 tableBody 滚动监听 以便同步滚动进度\n    this.tableBody.addEventListener('scroll', (e) => {\n      // 非自定义进度条滚动 非头部悬浮滚动\n      if (!this.isPBScroll && !this.isSuspensionScroll) {\n        this.progressBar.scrollLeft = e.target.scrollLeft\n        this.tableBodySuspension.scrollLeft = e.target.scrollLeft\n      }\n    })\n    // 通过使用定时器的方式来让代码延迟执行，每次窗口改变的时候就清除事件，只有停下改变之后才会继续再执行，解决resize执行多次的问题。\n    var resizeTimer = null\n    // 窗口大小变化监听\n    window.onresize = () => {\n      if (resizeTimer) { clearTimeout(resizeTimer) }\n      resizeTimer = setTimeout(() => { this.scrollChange() }, 100)\n    }\n    // 监听滚动对象\n    scrollListener.addEventListener('scroll', () => { this.scrollChange() })\n\n    // element-resize-detector 使用简介: https://www.jianshu.com/p/b9004cb2fa2c\n    // 需要执行：npm install element-resize-detector\n    var elementResizeDetectorMaker = require('element-resize-detector')\n    // 创建实例\n    this.erd = elementResizeDetectorMaker()\n    // 监听 tableWrapper 大小变化\n    this.erd.listenTo(this.tableWrapper, () => {\n      this.scrollChange()\n    })\n    // 监听 tableThead 大小变化\n    this.erd.listenTo(this.tableThead, (element) => {\n      this.tableTheadHeight = element.clientHeight\n      this.tableWrapperSuspension.style.height = `${this.tableTheadHeight + 2}px`\n      this.scrollChange()\n    })\n\n    // 头部悬浮处理\n    this.tableWrapperSuspension.style.position = 'absolute'\n    this.tableWrapperSuspension.style.top = '0'\n    this.tableWrapperSuspension.style.left = '0'\n    this.tableWrapperSuspension.style.right = '0'\n    this.tableWrapperSuspension.style.height = `${this.tableTheadHeight + 2}px`\n    this.tableWrapperSuspension.style.overflow = 'hidden'\n    // 获取头部悬浮的 tableBody\n    const tableScrollSuspension = this.tableWrapperSuspension.getElementsByClassName('ant-table-scroll')[0]\n    this.tableBodySuspension = tableScrollSuspension.getElementsByClassName('ant-table-body')[0]\n    // 添加进 tableBody 监听，以防重复设置滚动\n    this.tableBodySuspension.onmouseenter = () => {\n      this.isPBScroll = false\n      this.isSuspensionScroll = true\n    }\n    // 添加 tableBody 滚动监听 以便同步滚动进度\n    this.tableBodySuspension.addEventListener('scroll', (e) => {\n      // 非自定义进度条滚动 悬浮头部滚动\n      if (!this.isPBScroll && this.isSuspensionScroll) {\n        this.progressBar.scrollLeft = e.target.scrollLeft\n        this.tableBody.scrollLeft = e.target.scrollLeft\n      }\n    })\n  },\n  beforeDestroyed () {\n    // 移除监听器\n    if (this.erd) {\n      this.erd.uninstall(this.tableWrapper)\n      this.erd.uninstall(this.tableThead)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.plugin-view {\n  position: relative;\n}\n.progress-view {\n  height: 15px;\n}\n.progress-bar {\n  position: absolute;\n  overflow-x: auto;\n  display: none;\n  z-index: 100;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n</style>\n"]}]}